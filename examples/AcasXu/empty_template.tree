configuration {
    neural
}
enumerations {
    'clear', 'weak_left', 'weak_right', 'strong_left', 'strong_right'
}

constants {
    pi := 3.141592653589793238462643,
    distance_modifier := 10,
    max_dist := 8747
    min_velocity := 114
    max_velcoty := 114
    #{max_dist := (idiv, 87472, distance_modifier),
    min_velocity := (idiv, 1145, distance_modifier),
    max_velcoty := (idiv, 1145, distance_modifier)}#
}

variables {
    variable{env distance VAR [0, max_dist] assign{result{(idiv, max_dist, 4)}}}
    variable{env angle_own VAR [0, 720] assign{result{(idiv, max_dist, 4)}}} #{units: .5 degrees. I.E., a value of 360 means 180 degrees. Done to avoid decimals}#
    variable{env angle_intruder VAR [0, 720] assign{result{(idiv, max_dist, 4)}}} #{units: .5 degrees. I.E., a value of 360 means 180 degrees. Done to avoid decimals}#
    variable{env angle_to_intruder DEFINE INT assign{result{(idiv, max_dist, 4)}}} #{units: .5 degrees. I.E., a value of 360 means 180 degrees. Done to avoid decimals}#
    variable{env heading_of_intruder VAR [0, 720] assign{result{(idiv, max_dist, 4)}}} #{units: .5 degrees. I.E., a value of 360 means 180 degrees. Done to avoid decimals}#
    variable{env velocity_own VAR [min_velocity, max_velocity] assign{result{max_velocity}}}
    variable{env velocity_int VAR [min_velocity, max_velocity] assign{result{max_velocity}}}
    variable{bl network_1_1 NEURAL classification {'clear', 'weak_left', 'weak_right', 'strong_left', 'strong_right'}
	inputs {
	    distance,
	    (mult, 90, (rdiv, angle_to_intruder, pi)),
	    (mult, 90, (rdiv, heading_of_intruder, pi)),
	    velocity_own,
	    velocity_int
	}
	config {table}
	source { './networks/ACASXU_run2a_1_1_batch_2000.onnx'}
    }
    variable{bl network_2_1 NEURAL classification {'clear', 'weak_left', 'weak_right', 'strong_left', 'strong_right'}
	inputs {
	    distance,
	    (mult, 180, (rdiv, angle_to_intruder, pi)),
	    (mult, 180, (rdiv, heading_of_intruder, pi)),
	    velocity_own,
	    velocity_int
	}
	config {table}
	source { './networks/ACASXU_run2a_2_1_batch_2000.onnx'}
    }
    variable{bl network_3_1 NEURAL classification {'clear', 'weak_left', 'weak_right', 'strong_left', 'strong_right'}
	inputs {
	    distance,
	    (mult, 180, (rdiv, angle_to_intruder, pi)),
	    (mult, 180, (rdiv, heading_of_intruder, pi)),
	    velocity_own,
	    velocity_int
	}
	config {table}
	source { './networks/ACASXU_run2a_3_1_batch_2000.onnx'}
    }
    variable{bl network_4_1 NEURAL classification {'clear', 'weak_left', 'weak_right', 'strong_left', 'strong_right'}
	inputs {
	    distance,
	    (mult, 180, (rdiv, angle_to_intruder, pi)),
	    (mult, 180, (rdiv, heading_of_intruder, pi)),
	    velocity_own,
	    velocity_int
	}
	config {table}
	source { './networks/ACASXU_run2a_4_1_batch_2000.onnx'}
    }
    variable{bl network_5_1 NEURAL classification {'clear', 'weak_left', 'weak_right', 'strong_left', 'strong_right'}
	inputs {
	    distance,
	    (mult, 180, (rdiv, angle_to_intruder, pi)),
	    (mult, 180, (rdiv, heading_of_intruder, pi)),
	    velocity_own,
	    velocity_int
	}
	config {table}
	source { './networks/ACASXU_run2a_5_1_batch_2000.onnx'}
    }
}

environment_update {
}

checks {
}

environment_checks {
}

actions {
}


sub_trees {
}

tree {
}

tick_prerequisite {
}

specifications {
}