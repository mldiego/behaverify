
variables {
    variable { bl x VAR [0, x_max] assign {result {0} }}
    variable { bl y VAR [0, y_max] assign {result {0} } }
    variable { bl target_x VAR [0, x_max] assign {result {0} } }
    variable { bl target_y VAR [0, y_max] assign {result {0} } }
    variable { bl mission VAR BOOLEAN assign {result {False} } }
    variable { local saw_target VAR BOOLEAN assign {result {True} } }
    variable { env x_goal VAR [0, x_max] assign {result {(loop, i, [0, x_max] such_that True, i)} } }
    variable { env y_goal VAR [0, y_max] assign {result {(loop, i, [0, y_max] such_that True, i)} } }
    variable { env x_true VAR [0, x_max] assign {result {(loop, i, [0, x_max] such_that True, i)} } }
    variable { env y_true VAR [0, y_max] assign {result {(loop, i, [0, y_max] such_that True, i)} } }
    variable { env remaining_goals VAR [0, 3] assign {result {3} } }
}

environment_update {
    variable_statement {
	remaining_goals
	assign{
	    case { (and, (eq, x_goal, x_true), (eq, y_goal, y_true)) } end_case
	    result { (max, 0, (sub, remaining_goals, 1)) } 
	    result { remaining_goals } 
	}
    }
    variable_statement {
	x_goal
	assign{
	    case { (eq, 0, remaining_goals ) } end_case
	    result { x_goal } 
	    case { (and, (eq, x_goal, x_true), (eq, y_goal, y_true)) } end_case
	    result {(loop, i, [0, x_max] such_that True, i)} 
	    result { x_goal } 
	}
    }
    variable_statement {
	y_goal
	assign {
	    case { (eq, 0, remaining_goals) } end_case
	    result { y_goal } 
	    case { (and, (eq, x_goal, x_true), (eq, y_goal, y_true)) } end_case
	    result {(loop, i, [0, y_max] such_that True, i)} 
	    result { y_goal } 
	}
    }
}

checks {
    check {
	have_mission
	arguments{}
	read_variables { mission } end_read_variables
	condition { mission } end_condition
    } end_check
    check {
	target_reached
	arguments{}
	read_variables { x, y, target_x, target_y } end_read_variables
	condition { (and, (eq, x, target_x), (eq, y, target_y)) } end_condition
    } end_check
    check {
	x_too_small
	arguments{}
	read_variables { target_x, x } end_read_variables
	condition { (lt, x, target_x) } end_condition
    } end_check
    check {
	x_too_big
	arguments{}
	read_variables { target_x, x } end_read_variables
	condition { (gt, x, target_x) } end_condition
    } end_check
    check {
	y_too_small
	arguments{}
	read_variables { target_y, y } end_read_variables
	condition { (lt, y, target_y) } end_condition
    } end_check
    check {
	y_too_big
	arguments{}
	read_variables { target_y, y } end_read_variables
	condition { (gt, y, target_y) } end_condition
    } end_check
} end_checks

environment_checks {
} end_environment_checks

actions {
    action {
	get_mission
	arguments{}
	
	local_variables {} end_local_variables
	read_variables {} end_read_variables
	write_variables {mission, target_x, target_y} end_write_variables
	initial_values {
	} end_initial_values
	update {
	    read_environment {
		mission_func
		condition { True } end_condition
		variable_statement {target_x assign{result { x_goal }} }
		variable_statement {target_y assign{result { y_goal }} }
	    } end_read_environment
	    variable_statement {
		mission
		assign{result { True } }
	    } end_variable_statement
	    return_statement {
		result { success } 
	    } end_return_statement
	} end_update
    } end_action
    
    
    action {
	get_position
	arguments{}
	
	local_variables {} end_local_variables
	read_variables {} end_read_variables
	write_variables { x, y } end_write_variables
	initial_values {
	} end_initial_values
	update {
	    read_environment {
		position_func
		condition { True } end_condition
		variable_statement {x assign{result { x_true }} }
		variable_statement {y assign{result { y_true }} }
	    } end_read_environment
	    return_statement { result { success }  } end_return_statement
	} end_update
    } end_action
    
    action {
	clear_mission
	arguments{}
	local_variables {} end_local_variables
	read_variables {} end_read_variables
	write_variables { mission } end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		mission
		assign{
		    result { False } }
	    } end_variable_statement
	    return_statement { result { success }  } end_return_statement
	} end_update
    } end_action
    
    action {
	move
	arguments{delta_x := INT, delta_y := INT}
	local_variables {} end_local_variables
	read_variables {} end_read_variables
	write_variables {} end_write_variables
	initial_values {} end_initial_values
	update {
	    write_environment {
		x_func
		variable_statement {
		    x_true assign {result { (max, 0, (min, x_max, (add, x_true, delta_x))) } }
		}
	    } end_write_environment
	    write_environment {
		y_func
		variable_statement {
		    y_true assign{result { (max, 0, (min, y_max, (add, y_true, delta_y))) } }
		} 
	    } end_write_environment
	    return_statement { result { success }  } end_return_statement
	} end_update
    } end_action
} end_actions

sub_trees {
}end_sub_trees
tree{
    composite {
	robot_control
	sequence
	children {
	    get_position {}
	    decorator {
		reset_completed_mission_FiS
		X_is_Y
		X failure
		Y success
		child {
		    composite {
			reset_completed_mission
			sequence
			children {
			    target_reached {}
			    clear_mission {}
			} end_children
		    } end_composite
		}
	    } end_decorator
	    composite {
		confirm_mission
		selector
		children {
		    have_mission {}
		    get_mission {}
		} end_children
	    } end_composite
	    composite {
		move_robot
		selector
		children {
		    composite {
			try_right
			sequence
			children {
			    x_too_small {}
			    go_right : move {1, 0}
			} end_children
		    } end_composite
		    composite {
			try_left
			sequence
			children {
			    x_too_big {}
			    go_left : move {-1, 0}
			} end_children
		    } end_composite
		    composite {
			try_up
			sequence
			children {
			    y_too_small {}
			    go_up : move {0, 1}
			} end_children
		    } end_composite
		    composite {
			try_down
			sequence
			children {
			    y_too_big {}
			    go_down : move {0, -1}
			} end_children
		    } end_composite
		} end_children
	    } end_composite
	} end_children
    } end_composite
} end_tree

tick_prerequisite { (gt, remaining_goals, 0) } end_tick_prerequisite
specifications {
    LTLSPEC { (finally, (eq, remaining_goals, 0)) } end_LTLSPEC
    CTLSPEC { (always_finally, (eq, remaining_goals, 0)) } end_CTLSPEC
} end_specifications