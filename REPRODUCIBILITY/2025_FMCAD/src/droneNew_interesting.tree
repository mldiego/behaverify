configuration {}
enumerations {
    'good', 'low', 'critical',
    'off', 'on', 'failed',
    'none', 'land', 'takeoff', 'fly'
}
constants {
    points := 15
}
variables {
    variable { bl droneStatus VAR {'off', 'on', 'failed'} assign{result{'off'}}}
    variable { bl camStatus VAR {'off', 'on', 'failed'} assign{result{'off'}}}
    variable { bl startedDC VAR BOOLEAN assign{result{False}}}
    variable { bl turnOff VAR BOOLEAN assign{result{False}}}
    variable { bl camT VAR BOOLEAN assign{result{False}}}
    variable { bl move VAR {'none', 'land', 'takeoff', 'fly'} assign{result{'none'}}}
    variable { bl xyz DEFINE INT array (mult, 3, (add, 2, points)) default{assign{result{0}}} constant_index
	index_of{0}assign{result{-10}}
	index_of{1}assign{result{-10}}
	index_of{2}assign{result{5}}
	(loop, i, [0, 2] such_that True,
	    (loop, j, [0, 4] such_that True,
		(loop, k, [0, 2] such_that True,
		    index_of{(add, (mult, i, 15), (mult, j, 3), k, 3)}assign{
			case{(eq, k, 2)}result{(mult, (add, i, 1), 20)}
			case{(and, (eq, j, 0), (eq, k, 0))}result{-30}
			case{(and, (eq, j, 0), (eq, k, 1))}result{-30}
			case{(and, (eq, j, 1), (eq, k, 0))}result{-15}
			case{(and, (eq, j, 1), (eq, k, 1))}result{30}
			case{(and, (eq, j, 2), (eq, k, 0))}result{0}
			case{(and, (eq, j, 2), (eq, k, 1))}result{-30}
			case{(and, (eq, j, 3), (eq, k, 0))}result{15}
			case{(and, (eq, j, 3), (eq, k, 1))}result{30}
			case{(and, (eq, j, 4), (eq, k, 0))}result{30}
			case{(and, (eq, j, 4), (eq, k, 1))}result{-30}
			result{0}
		    }
		)
	    )
	)
	index_of{48}assign{result{0}}
	index_of{49}assign{result{0}}
	index_of{50}assign{result{60}}
    }
    variable { bl ind VAR [0, (add, points, 1)] assign{result{0}}}
    variable { bl x_g DEFINE INT assign{result{(index, xyz, (add, 0, (mult, 3, ind)))}}}
    variable { bl y_g DEFINE INT assign{result{(index, xyz, (add, 1, (mult, 3, ind)))}}}
    variable { bl z_g DEFINE INT assign{result{(index, xyz, (add, 2, (mult, 3, ind)))}}}
    variable { env x_a VAR [-30, 30] assign{result{0}}}
    variable { env y_a VAR [-30, 30] assign{result{0}}}
    variable { env z_a VAR [0, 80] assign{result{0}}}
    variable { env battery VAR {'good', 'low', 'critical'} assign{result{'good'}}}
    variable { env loc VAR BOOLEAN assign{result{True, False}}}
}

environment_update {
    variable_statement {
	loc
	assign{result{True, False}}
    }
    variable_statement {
	battery
	assign{
	    case{(and, (eq, x_a, -10), (eq, y_a, -10), (eq, z_a, 0), (eq, battery, 'critical'))}result{'good', 'low', 'critical'}
	    case{(and, (eq, x_a, -10), (eq, y_a, -10), (eq, z_a, 0), (eq, battery, 'low'))}result{'good', 'low'}
	    case{(and, (eq, x_a, -10), (eq, y_a, -10), (eq, z_a, 0), (eq, battery, 'good'))}result{'good'}
	    case{(and, (eq, droneStatus, 'on'), (eq, battery, 'good'))} result{'good', 'low'}
	    case{(and, (eq, droneStatus, 'on'), (eq, battery, 'low'))} result{'low', 'critical'}
	    result{battery}
	}
    }
    variable_statement {
	x_a
	assign {
	    case{(and, (eq, move, 'fly'), (lt, x_a, x_g))}result{(add, x_a, 1)}
	    case{(and, (eq, move, 'fly'), (gt, x_a, x_g))}result{(sub, x_a, 1)}
	    result{x_a}
	}
    }
    variable_statement {
	y_a
	assign {
	    case{(and, (eq, move, 'fly'), (lt, y_a, y_g))}result{(add, y_a, 1)}
	    case{(and, (eq, move, 'fly'), (gt, y_a, y_g))}result{(sub, y_a, 1)}
	    result{y_a}
	}
    }
    variable_statement {
	z_a
	assign {
	    case{(and, (eq, move, 'fly'), (lt, z_a, z_g))}result{(add, z_a, 1)}
	    case{(and, (eq, move, 'fly'), (gt, z_a, z_g))}result{(sub, z_a, 1)}
	    case{(and, (eq, move, 'takeoff'), (lt, z_a, 5))}result{(add, z_a, 1)}
	    case{(and, (eq, move, 'land'), (gt, z_a, 0))}result{(sub, z_a, 1)}
	    result{z_a}
	}
    }
}

checks {
    check {
	CheckCam
	arguments{}
	read_variables{camT}
	condition{camT}
    }
    check {
	MaxP
	arguments {}
	read_variables {ind}
	condition{(eq, (add, 1, points), ind)}
    }
    check {
	Landing
	arguments {}
	read_variables {move}
	condition{(eq, (move), 'land')}
    }
    check {
	Started
	arguments {}
	read_variables {startedDC}
	condition{startedDC}
    }
    check {
	ShuttingDown
	arguments {}
	read_variables {turnOff}
	condition{(not, turnOff)}
    }
}

environment_checks {
    environment_check{
	BCritical
	arguments{}
	read_variables{}
	condition{(eq, battery, 'critical')}
    }
    environment_check{
	BLow
	arguments{}
	read_variables{}
	condition{(eq, battery, 'low')}
    }
    environment_check{
	LBad
	arguments{}
	read_variables{}
	condition{(not, loc)}
    }
    environment_check {
	AtP
	arguments{}
	read_variables{x_g, y_g, z_g}
	condition{(and, (eq, x_a, x_g), (eq, y_a, y_g), (eq, z_a, z_g))}
    }
    environment_check {
	Landed
	arguments{}
	read_variables{}
	condition{(eq, z_a, 0)}
    }
    environment_check {
	Tookoff
	arguments{}
	read_variables{}
	condition{(gte, z_a, 5)}
    }
}

actions {
    action{
	Start
	arguments {} local_variables {} read_variables {} write_variables {droneStatus, camStatus, camT, move, startedDC, turnOff} initial_values{}
	update {
	    variable_statement {
		turnOff
		assign{result{False}}
	    }
	    variable_statement {
		camT
		assign{result{False}}
	    }
	    variable_statement {
		move
		assign{result{'none'}}
	    }
	    variable_statement {
		camStatus
		assign{
		    case{(eq, camStatus, 'failed')}result{'failed'}
		    case{(eq, camStatus, 'on')}result{'on'}
		    result{'on', 'failed', 'off'}
		}
	    }
	    variable_statement {
		droneStatus
		assign{
		    case{(eq, droneStatus, 'failed')}result{'failed'}
		    case{(eq, droneStatus, 'on')}result{'on'}
		    result{'on', 'failed', 'off'}
		}
	    }
	    variable_statement {
		startedDC
		assign{result{(and, (eq, droneStatus, 'on'), (eq, camStatus, 'on'))}}
	    }
	    return_statement{
		case{(and, (eq, droneStatus, 'on'), (eq, camStatus, 'on'))} result{success}
		case{(or, (eq, droneStatus, 'failed'), (eq, camStatus, 'failed'))} result{failure}
		result{running}
	    }
	}
    }
    action {
	Land
	arguments {} local_variables {} read_variables {} write_variables {move} initial_values{}
	update {
	    variable_statement {
		move
		assign{result{'land'}}
	    }
	    return_statement{result{running}}
	}
    }
    action {
	GoTo
	arguments {} local_variables {} read_variables {} write_variables {move} initial_values{}
	update {
	    variable_statement {
		move
		assign{result{'fly'}}
	    }
	    return_statement{result{running}}
	}
    }
    action {
	Takeoff
	arguments {} local_variables {} read_variables {} write_variables {move} initial_values {}
	update {
	    variable_statement {
		move
		assign{result{'takeoff'}}
	    }
	    return_statement{result{running}}
	}
    }
    action {
	Shutdown
	arguments {} local_variables {} read_variables {} write_variables {droneStatus, camStatus, move, startedDC, turnOff, camT} initial_values {}
	update {
	    variable_statement {
		camT
		assign{result{False}}
	    }
	    variable_statement {
		move
		assign{result{'none'}}
	    }
	    variable_statement {
		camStatus
		assign{
		    case{(eq, camStatus, 'failed')}result{'failed'}
		    case{(eq, camStatus, 'off')}result{'off'}
		    result{'on', 'failed', 'off'}
		}
	    }
	    variable_statement {
		droneStatus
		assign{
		    case{(eq, droneStatus, 'failed')}result{'failed'}
		    case{(eq, droneStatus, 'off')}result{'off'}
		    result{'on', 'failed', 'off'}
		}
	    }
	    variable_statement {
		turnOff
		assign{result{(and, (eq, droneStatus, 'off'), (eq, camStatus, 'off'))}}
	    }
	    variable_statement {
		startedDC
		assign{result{(not, turnOff)}}
	    }
	    return_statement{
		case{(or, (eq, droneStatus, 'failed'), (eq, camStatus, 'failed'))} result{failure}
		result{running}
	    }
	}
    }
    action {
	Report
	arguments {} local_variables {} read_variables {} write_variables {camT, turnOff} initial_values {}
	update {
	    return_statement{case{camT}result{success}result{failure}}
	    variable_statement{
		camT
		assign{result{False}}
	    }
	    variable_statement{
		turnOff
		assign{result{True}}
	    }
	}
    }
    action {
	CameraTrack
	arguments {} local_variables {} read_variables {} write_variables {camT} initial_values {}
	update {
	    variable_statement{
		camT
		assign{result{True, False}}
	    }
	    return_statement{case{camT}result{success}result{failure}}
	}
    }
    action {
	SetP
	arguments {p := INT} local_variables {} read_variables {} write_variables {ind} initial_values {}
	update {
	    variable_statement{
		ind
		assign{result{p}}
	    }
	    return_statement{result{success}}
	}
    }
    action {
	SetMinP
	arguments {} local_variables {} read_variables {} write_variables {ind} initial_values {}
	update {
	    variable_statement{
		ind
		assign{
		    case{(eq, ind, 0)}result{1}
		    result{ind}
		}
	    }
	    return_statement{result{success}}
	}
    }
    action {
	IncP
	arguments {} local_variables {} read_variables {} write_variables {ind} initial_values {}
	update {
	    variable_statement{
		ind
		assign{result{(min, (add, points, 1), (add, ind, 1))}}
	    }
	    return_statement{result{success}}
	}
    }
    
}


sub_trees {
}

tree {
    composite {
	Drone sequence children{
	    composite {
		StartSel selector children{
		    Started {}
		    Start {}#{}#
		}
	    }
	    composite {
		ShutdownSel selector children{
		    ShuttingDown {}
		    Shutdown {} #{}#
		}
	    }
	    composite {
		Main selector children{
		    composite {
			LandingSeq sequence children {
			    Landing {} #{}#
			    composite {
				LandSel selector children {
				    Landed {} #{}#
				    Land {} #{}#
				}
			    }
			}
		    }
		    composite {
			ESeq sequence children {
			    composite {
				ESel selector children {
				    BCritical {} #{}#
				    LBad {} #{}#
				}
			    }
			    ELand : Land {} #{}#
			}
		    }
		    composite {
			TakeoffSeq sequence children {
			    composite {
				TakeoffSel selector children {
				    Tookoff{} #{}#
				    Takeoff{} #{}#
				}
			    }
			    composite {
				MoveSel selector children {   
				    composite {
					LSeq sequence children {
					    BLow {} #{}#
					    SetP0 : SetP {0} #{}#
					    composite {
						LSel selector children {
						    AtP0 : AtP {} #{}#
						    GoTo0 : GoTo {} #{}#
						}
					    }
					    LLand : Land {} #{}#
					}
				    }
				    composite {
					MoveSeq sequence children {
					    composite {
						ObjSel selector children{
						    CameraTrack {} #{}#
						    composite {
							PointSeq sequence children{
							    SetMinP {} #{}#
							    composite {
								PointSel selector children {
								    AtP {} #{}#
								    IncP {} #{}#
								}
							    }
							    composite {
								FinalSel selector children {
								    MaxP {} #{}#
								    GoToP : GoTo {} #{}#
								}
							    }
							}
						    }
						}
					    }
					    SetPMax : SetP {(add, 1, points)}
					    composite {
						MaxSel selector children {
						    AtPMax : AtP {} #{}#
						    GoToMax : GoTo {} #{}#
						}
					    }
					    GLand : Land {} #{}#
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	    Report {} #{}#
	}
    }
}

tick_prerequisite {
    True
}

specifications {
    INVARSPEC {(implies, (active, Main), (eq, (failure, Drone), (failure, Report)))}
    INVARSPEC {(implies, (eq, droneStatus at -1, 'off'), (eq, z_a at -1, 0))}
    INVARSPEC {(implies, (gt, z_a at -1, 0), (eq, droneStatus at -1, 'on'))}
    CTLSPEC {
	(implies,
	    (and,
		(always_globally, (eq, battery at 0, 'good')),
		(always_globally, (loc at 0)),
		(always_finally, (success, Start)),
		(always_globally, (not, (success, CameraTrack)))
	    ),
	    (and, 
		(loop, i, [1, points] such_that True, 
		    (always_finally,
			(and,
			    (eq, x_a at -1, (index, xyz at -1, constant_index (add, 0, (mult, i, 3)))),
			    (eq, y_a at -1, (index, xyz at -1, constant_index (add, 1, (mult, i, 3)))),
			    (eq, z_a at -1, (index, xyz at -1, constant_index (add, 2, (mult, i, 3))))
			)
		    )
		),
		(always_finally, (failure, Report))
	    )
	)
    }
}