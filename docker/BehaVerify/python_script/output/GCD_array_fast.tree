#{Comments are placed within matching brackets like this. You *CANNOT* nest comments}#
#{
    We will now find the GCD of n different numbers.
    To do this, we will find the gcd of our first two numbers.
    Call this number g2.
    We will then find the gcd of g2 and the third number.
    Call this number g3.
    Etc.
    In the end, we will have the gcd.
}#
configuration {
    #{We'll ignore this for now}#
}
enumerations {
    #{We'll also ignore this for now}#
}

constants {
    max_val := 15, #{We set up a constant here.}#
    n := 3
}

variables {
    variable {
	bl #{type}#
	a #{name}#
	FROZENVAR #{Modeled as}#
	[1, max_val] #{Domain}#
	array
	n
	default{
	    assign {
		result{
		    #{If more than one option is presented in a result, it will be chosen from non-deterministically}#
		    #{In this case, we will use a loop rather than writing out each possible value by hand}#
		    #{For more details, see the tutorial}#
		    (loop, loop_var, [1, max_val] such_that True, loop_var)
		}
	    }
	}
    }
    variable {
	bl #{type}#
	x #{name}#
	VAR #{Modeled as}#
	[1, max_val] #{Domain}#
	assign {
	    result{
		(index, a, constant_index 0) #{Because x depends on a, x must be declared AFTER a}#
	    }
	}
    }
    variable {
	bl #{type}#
	y #{name}#
	VAR #{Modeled as}#
	[1, max_val] #{Domain}#
	assign {
	    result{
		(index, a, constant_index 1)
	    }
	}
    }
    variable {
	bl
	the_index
	VAR
	[1, n]
	assign{result{1}}
    }
    variable {
	local
	temp
	VAR
	[1, max_val]
	assign {
	    result {
		1
	    }
	}
    }
}

environment_update {
    #{we don't have an environment in this example}#
}

checks {
    check {
	no_swap #{name of the check}#
	arguments {} #{no arguments}#
	read_variables {x, y} #{variables that will be read. Can only read blackboard variables}#
	condition{ (gte, x, y) } #{if true, success, else false}#
    }
    check {
	done
	arguments {}
	read_variables {x, y}
	condition { (eq, (mod, x, y), 0) }
    }
}

environment_checks {
    #{Like checks, but can read environment variables and blackboard variables}#
}

actions {
    action {
	swap #{name of the action}#
	arguments {} #{no arguments for this}#
	local_variables {temp} #{we have one local variable}#
	read_variables {} #{a write variable can also be read from, so we don't have any read variables}#
	write_variables {x, y} #{if you set a variable value, must be in the write variables}#
	initial_values {} #{Each node can set a new initial value for local variables it uses. We don't need to though}#
	update {
	    #{List of updates to do, in order. Must have exactly one return statement}#
	    variable_statement{
		temp #{variable to update}#
		assign{result{x}} #{value to update to}#
	    }
	    variable_statement{
		x
		assign{result{y}}
	    }
	    variable_statement{
		y
		assign{result{temp}}
	    }
	    return_statement{result{success}}
	    #{unlike most statements, return_statement must be deterministic}#
	}
    }
    action {
	next_index
	arguments {}
	local_variables {}
	read_variables {a}
	write_variables {x, the_index}
	initial_values{}
	update {
	    variable_statement{
		the_index
		assign{result{(min, n, (add, the_index, 1))}}
	    }
	    variable_statement{
		x
		assign{
		    case{(eq, the_index, n)} result {x}
		    result { (index, a, the_index)}
		}
	    }
	    return_statement{
		case{(eq, the_index, n)} result{success}
		result{running}
	    }
	}
    }
    action {
	next_value
	arguments {}
	local_variables {}
	read_variables {y}
	write_variables {x}
	initial_values {}
	update {
	    variable_statement{
		x
		assign{result{(max, 1, (mod, x, y))}}
	    }
	    return_statement{result{running}}
	}
    }
}


sub_trees {
    #{subtrees can be inserted to either make it easier to parse the tree or reuse portions of the tree. not useful to us now}#
}

tree {
    #{
	Overview of our tree structure
	gcd will cause swap_sel to go first.
	swap_sel first tries no_swap, and if that fails, executes the swap
	Either way, swap_sel will return success.
	This makes iterate_sel to become active
	iterate_sel will check if we are done -> success returned
	If we are not done, we iterate to the next value and return running
	Thus, gcd will return running until we are done, at which point it will return success.
    }#
    composite {
	gcd #{our root node}#
	sequence #{a sequence node}#
	#{not using memory}#
	children {
	    composite {
		swap_sel
		selector
		children {
		    no_swap {}
		    swap {}
		}
	    }
	    composite {
		iterate_sel
		selector
		children {
		    composite {
			index_seq
			sequence
			children{
			    done {}
			    next_index {}
			}
		    }
		    next_value {}
		}
	    }
	}
    }	
}

tick_prerequisite {
    True #{we can use this to "end" the simulation at some point. In this case, we won't bother}#
}

specifications {
    #{We can't use "forall" in the mathematical sense. Instead, we will brute force write every possible value and compare against it, thereby proving we have the Greatest common denonminator, not just a common denominator. We will unravel a loop to time save on this.}#
    LTLSPEC {
	(finally,
	    (globally,
		(and,
		    (success, gcd), #{root returns success}#
		    (loop, outter_loop_var, [0, (sub, n, 1)] such_that True,
			(eq, (mod, (index, a, constant_index outter_loop_var), y), 0)
		    ),
		    (loop, loop_var, [1, max_val] such_that True,
			(or,
			    (lte, loop_var, y),
			    (loop, inner_loop_var, [0, (sub, n, 1)] such_that True,
				(neq, (mod, (index, a, constant_index inner_loop_var), loop_var), 0)
			    )
			)
		    )
		)
	    )
	)
    }
}